pool:
  vmImage: 'ubuntu-latest'

name: "$(Rev:r)"
variables:
  - name: ClientPackageVersion
    value: '1.0.0'
  - name: MajorMinor
    value: '3.3'
  - name: ProductVersion
    ${{ if eq(variables['Build.SourceBranchName'], 'release') }}:
      value: 'MyProduct-$(MajorMinor)'
    ${{ else }}:
      value: 'MyProduct-$(MajorMinor)-beta-$(Build.BuildNumber)'

stages:
- stage: ci
  displayName: Continuous Integration
  jobs:
  - job: build
    displayName: 'Build and Publish Weather Forecast API'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK 8.x'
      inputs:
        version: '8.x'

    - task: DotNetCoreCLI@2
      displayName: 'Compile the application'
      inputs:
        projects: '**/*.csproj'
        arguments: '--configuration $(configuration)'

    - task: DotNetCoreCLI@2
      displayName: 'Run unit tests'
      inputs:
        command: test
        projects: '**/*.UnitTests.csproj'
        arguments: '--configuration $(configuration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
        publishTestResults: true

    - task: DotNetCoreCLI@2
      displayName: 'Run integration tests'
      inputs:
        command: test
        projects: '**/*.IntegrationTests.csproj'
        publishTestResults: true
        arguments: '--configuration $(configuration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'

    - task: PublishCodeCoverageResults@2
      displayName: 'Publish Coverage to ADO'
      inputs:
        summaryFileLocation: '**/*coverage.cobertura.xml'
        codeCoverageTool: 'cobertura'

    - task: DotNetCoreCLI@2
      displayName: 'Dotnet Publish'
      inputs:
        command: publish
        arguments: '--output $(Build.ArtifactStagingDirectory)/api-package --configuration $(configuration)'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Pipeline Artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/api-package'
        artifact: 'WeatherForecastApi'

# build and publish Nuget package for the client
    - task: DotnetCoreCLI@2
      displayName: 'Build Nuget Package Client'
      inputs:
        command: pack
        packagesToPack: '$(Build.SourcesDirectory)/WeatherForecast.Client/WeatherForecast.Client.csproj'
        configuration: 'Release'
        packDirectory: '$(Build.ArtifactStagingDirectory)/packages'
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'ClientPackageVersion'


# build and publish Nuget package for the dto
    - task: DotnetCoreCLI@2
      displayName: 'Build Nuget Package DTO'
      inputs:
        command: pack
        packagesToPack: '$(Build.SourcesDirectory)/WeatherForecast.Api.dto/WeatherForecast.Api.dto.csproj'
        configuration: 'Release'
        packDirectory: '$(Build.ArtifactStagingDirectory)/packages'
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'ClientPackageVersion'

# publish the Nuget client packages to feed
    - task: DotnetCoreCLI@2
      displayName: 'Publish Nuget Packages Client'
      inputs:
        command: push
        packagesToPush: '$(Build.ArtifactStagingDirectory)/packages/WeatherForecast.Client*.nupkg'
        publishVstsFeed: 'az400proj1/weatherforecast-api-package'

      # publish the Nuget dto packages to feed
    - task: DotnetCoreCLI@2
      displayName: 'Publish Nuget Packages DTO'
      inputs:
        command: push
        packagesToPush: '$(Build.ArtifactStagingDirectory)/packages/WeatherForecast.API.Dto*.nupkg'
        publishVstsFeed: 'az400proj1/weatherforecast-api-package'

# deploy to test environment
- stage: cd_test
  displayName: Continuous Deployment to Test
  dependsOn: ci
  condition: succeeded()
  jobs:
  - template: stage-deployment.yml
    parameters:
      ResourceGroupName: 'az400learning'
      WebAppName: 'ijwebappdotnet-test'

#   deploy to production environment
- stage: cd_prod
  displayName: Continuous Deployment to Production
  dependsOn: ci
  condition: succeeded()
  jobs:
    - template: stage-deployment.yml
      parameters:
        ResourceGroupName: 'az400learning'
        WebAppName: 'ijwebappdotnet-prod'

# just to test build number ID
#- stage: demo
#  jobs:
#    - job: demo_job
#      steps:
#        - script: echo $(ProductVersion)
#          displayName: 'Display Product Version'

